services: #dockers compose expects this -> to run, we can do "docker compose up" and to rollback to clean docker env do "docker compose up --remove-orphans"
  backend: #custom key name for the service like <frontend> <backend> <db>
    #image: python:latest #docker image name -> <imagename>:<tag>
    build:
      context: ./backend #path to the directory containing the Dockerfile
      dockerfile: dev.Dockerfile #name of the Dockerfile (if not named Dockerfile)
    ports: #port mapping from host to container
      - 8080:8000 #host:container
    command: uvicorn main:app --host 0.0.0.0 --port 8000 #command to run inside the container
    environment:
      - PORT=8000
      - PROJECT=DOCKERHELLO
    env_file:
      - .env.sample
    volumes:
      - ./backend/src:/app
    depends_on:
      - db #service dependency, wait for db service to be ready before starting this service
    develop: #for docker compose dev mode
      watch: #list of paths to watch for changes
        - action: rebuild #action to take when a change is detected
          path: backend/requirements.txt #path to watch for changes
        - action: rebuild
          path: backend/dev.Dockerfile
        - action: restart 
          path: backend/src/ 
        # - action: sync #sync changes from host to container without restarting
        #   path: backend/src/ #path to watch for changes
        #   target: /app #path inside the container to sync changes to
  #DATBASE_URL=postgresql://user:password@service:port/dbname
  db:
    image: postgres:17.5
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=dbpassword
      - POSTGRES_DB=devdb
    # env_file:
    #   - .env.sample-db
    volumes:
      - dc_managed_db_volume:/var/lib/postgresql/data #mounting named volume to container directory for data persistence

  # static-html: #custom key name for the service like <frontend> <backend> <db>
  #   #image: python:latest #docker image name -> <imagename>:<tag>
  #   build:
  #     context: ./static-html #path to the directory containing the Dockerfile
  #     dockerfile: static.Dockerfile #name of the Dockerfile (if not named Dockerfile)
  #   ports: #port mapping from host to container
  #     - 8000:8000 #host:container
  #     - 1000:8000 #another port mapping
  #   command: python3 -m http.server 8000 #command to run inside the container
  #   volumes:
  #     - ./static-html/src:/app #mounting local directory to container directory, for real-time updates
  # app2: #custom key name for the service like <frontend> <backend> <db>
  #   image: python:latest #docker image name -> <imagename>:<tag>
  #   ports: #port mapping from host to container
  #     - 8001:8000 #host:container
  #     - 1001:8000 #another port mapping
  #   command: python3 -m http.server 8000 #command to run inside the container

volumes:
  dc_managed_db_volume: #named volume for database persistence, addt: dont use docker for backend bc volume is also going to b deleted if we delete the backend service